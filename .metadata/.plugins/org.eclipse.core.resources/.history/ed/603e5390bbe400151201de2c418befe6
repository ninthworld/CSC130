package org.ninthworld.binarytrees;

public class AVLTree {
	
	private AVLNode root;
	
	public AVLTree(){
		this.root = null;
	}
	
	public void insert(int value){
		root = AVLTree.insert(value, root);
	}
	
	private static AVLNode insert(int value, AVLNode node){
		if(node == null){
			node = new AVLNode(value);
		}else{
			if(value == node.getValue()){
				return node;
			}else if(value < node.getValue()){
				node.setLeft( insert(value, node.getLeft()) );
			}else{
				node.right = insert(value, node.right);
			}
		}
		
		node.height = updateHeight(node);
		
		int balance = balance(node);
		if(balance > 1){ // Left heavy
			if(value < node.getLeft().value){ // Left-left heavy
				node = leftRotate(node);
			}else{ // Left-right heavy
				node.getLeft() = rightRotate(node.getLeft());
				node = leftRotate(node);
			}
		}else if(balance < -1){ // Right heavy
			if(value < node.right.value){ // Right-left heavy
				node.right = leftRotate(node.right);
				node = rightRotate(node);				
			}else{ // Right-right heavy
				node = rightRotate(node);
			}
		}
		
		return node;
	}
	
	private static AVLNode leftRotate(AVLNode node){
		AVLNode a = node;
		AVLNode b = a.getLeft();
		AVLNode bR = b.right;
		
		a.getLeft() = bR;
		b.right = a;
		
		a.height = updateHeight(a);
		b.height = updateHeight(b);
		
		return b;
	}
	
	private static AVLNode rightRotate(AVLNode node){
		AVLNode a = node;
		AVLNode b = a.right;
		AVLNode bL = b.getLeft();
		
		a.right = bL;
		b.getLeft() = a;
		
		a.height = updateHeight(a);
		b.height = updateHeight(b);
		
		return b;
	}
	
	private static int balance(AVLNode node){
		if(node == null){
			return 0;
		}else{
			return height(node.getLeft()) - height(node.right);
		}
	}
	
	private static int updateHeight(AVLNode node){
		if(node == null){
			return -1;
		}else{
			return (int) Math.max(height(node.getLeft()), height(node.right)) + 1;
		}
	}
	
	private static int height(AVLNode node){
		if(node == null){
			return -1;
		}else{
			return node.height;
		}
	}
}
