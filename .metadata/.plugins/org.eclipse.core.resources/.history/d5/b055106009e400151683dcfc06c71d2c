package org.ninthworld.redone;

import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

import javax.swing.JFrame;

public class TreeTesting {
		
	public TreeTesting(){
		Random rand = new Random(12345L);
		int maxInts = (int)Math.pow(2, 20);
		int[] incInts = new int[maxInts],
			  decInts = new int[maxInts],
			  rndInts = new int[maxInts];
		
		for(int i=0; i<maxInts; i++){
			incInts[i] = i;
			decInts[i] = maxInts - (i+1);
			rndInts[i] = i;
		}
		for(int i=0; i<rndInts.length; i++){
			int j = rand.nextInt(rndInts.length);
			rndInts[i] = j;
			rndInts[j] = i;
		}
		
		JFrame frame = new JFrame("AVL Tree");
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(640, 480);
		frame.setBackground(Color.decode("#3F3F49"));
		
		HashMap<String, HashMap<Integer, Double>> tests = new HashMap<String, HashMap<Integer, Double>>();
		tests.put("Increasing", new HashMap<Integer, Double>());
		tests.put("Decreasing", new HashMap<Integer, Double>());
		tests.put("Randomized", new HashMap<Integer, Double>());
		
		GraphAVLTree avlGraph = new GraphAVLTree(tests);
		frame.add(avlGraph);
		
		new Thread(new Runnable(){
			public void run(){
				for(String key : tests.keySet()){
					HashMap<Integer, Double> map = tests.get(key);
					
					for()
					
					frame.repaint();
				}
			}
		}).start();
	}
	
	public static int[] getIncArray(int count){
		int[] array = new int[count];
		for(int i=0; i<array.length; i++){
			array[i] = i;
		}
		return array;
	}
	
	public static void main(String[] args){
		new TreeTesting();
		/*
		Random rand = new Random(12345L);
		int maxInts = (int)Math.pow(2, 20);
		int[] incInts = new int[maxInts],
			  decInts = new int[maxInts],
			  rndInts = new int[maxInts];
		
		for(int i=0; i<maxInts; i++){
			incInts[i] = i;
			decInts[i] = maxInts - (i+1);
			rndInts[i] = i;
		}
		for(int i=0; i<rndInts.length; i++){
			int j = rand.nextInt(rndInts.length);
			rndInts[i] = j;
			rndInts[j] = i;
		}

		System.out.printf("(AVL Tree)\n\n");
		
		int trials = 16;
		printAVLTreeAverage(incInts, trials, "Increasing");
		printAVLTreeAverage(decInts, trials, "Decreasing");
		printAVLTreeAverage(rndInts, trials, "  Random  ");
		*/
	}
	
	public static void printAVLTreeAverage(int[] values, int trials, String msg){
		double[] tests = new double[trials];
		System.out.printf("%s - ", msg);
		for(int i=0; i<tests.length; i++){
			tests[i] = testAVLTreeMilli(values);
			System.out.printf("%6.1fms, ", tests[i]);
		}
		
		double avg = 0;
		for(double d : tests){
			avg += d;
		}
		avg /= tests.length;
		System.out.printf("Avg: %6.1fms\n\n", avg);
	}
	
	public static double testAVLTreeMilli(int[] values){
		long start, end;
		AVLTree avlTree = new AVLTree();
		
		start = System.nanoTime();
		for(int i : values){
			avlTree.insert(i);
		}
		end = System.nanoTime();
		
		return (end - start) / 1000000.0;
	}
}
