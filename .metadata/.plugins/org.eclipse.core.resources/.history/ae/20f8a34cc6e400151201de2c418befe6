package org.ninthworld.binarytrees;

public class AVLTree extends BSTree {
	
	private AVLNode root;
	
	public AVLTree(){
		this.root = null;
	}
	
	public void insert(int value){
		root = AVLTree.insert(value, root);
	}
	
	public void remove(int value){
		root = AVLTree.remove(value, root);
	}
	
	public AVLNode find(int value){
		return (AVLNode) super.find(value);
	}
	
	public AVLNode findMin(){
		return (AVLNode) super.findMin();
	}
	
	public AVLNode findMax(){
		return (AVLNode) super.findMax();
	}
	
	private static AVLNode insert(int value, AVLNode node){
		if(node == null){
			node = new AVLNode(value);
		}else{
			if(value == node.getValue()){
				return node;
			}else if(value < node.getValue()){
				node.setLeft( insert(value, node.getLeft()) );
			}else{
				node.setRight( insert(value, node.getRight()) );
			}
		}
		
		node.setHeight( updateHeight(node) );
		
		int balance = balance(node);
		if(balance > 1){ 
			// Left heavy
			if(value < node.getLeft().getValue()){ 
				// Left-left heavy
				node = leftRotate(node);
			}else{ 
				// Left-right heavy
				node.setLeft( rightRotate(node.getLeft()) );
				node = leftRotate(node);
			}
		}else if(balance < -1){ 
			// Right heavy
			if(value < node.getRight().getValue()){ 
				// Right-left heavy
				node.setRight( leftRotate(node.getRight()) );
				node = rightRotate(node);				
			}else{ 
				// Right-right heavy
				node = rightRotate(node);
			}
		}
		
		return node;
	}
	
	private static AVLNode remove(int value, AVLNode node){
		if(node == null){
			return node;
		}else{
			if(value == node.getValue()){
				if(node.getLeft() == null && node.getRight() == null){
					return null;
				}else if(node.getLeft() == null){
					return node.getRight();
				}else if(node.getRight() == null){
					return node.getLeft();
				}else{
					BSNode max = findMax(node.getLeft());
					node.setValue(max.getValue());
					remove(max.getValue(), node.getLeft());
				}
			}else if(value > node.getValue()){
				node.setRight( remove(value, node.getRight()) );
			}else{
				node.setLeft( remove(value, node.getLeft()) );
			}
		}
		
		return node;
	}
	
	private static AVLNode leftRotate(AVLNode node){
		AVLNode a = node;
		AVLNode b = a.getLeft();
		AVLNode bR = b.getRight();
		
		a.setLeft( bR );
		b.setRight( a );
		
		a.setHeight( updateHeight(a) );
		b.setHeight( updateHeight(b) );
		
		return b;
	}
	
	private static AVLNode rightRotate(AVLNode node){
		AVLNode a = node;
		AVLNode b = a.getRight();
		AVLNode bL = b.getLeft();
		
		a.setRight( bL );
		b.setLeft( a );
		
		a.setHeight( updateHeight(a) );
		b.setHeight( updateHeight(b) );
		
		return b;
	}
	
	private static int balance(AVLNode node){
		if(node == null){
			return 0;
		}else{
			return height(node.getLeft()) - height(node.getRight());
		}
	}
	
	private static int updateHeight(AVLNode node){
		if(node == null){
			return -1;
		}else{
			return (int) Math.max(height(node.getLeft()), height(node.getRight())) + 1;
		}
	}
	
	private static int height(AVLNode node){
		if(node == null){
			return -1;
		}else{
			return node.getHeight();
		}
	}
}
